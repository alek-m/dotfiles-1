#!/usr/bin/python2
#
# pbrisbin 2013 - access Google Contacts for mutt's query_command.
#
# gcontacts.py originally written by Jim Karsten <jimkarsten@gmail.com>.
#
# Changes by Pat Brisbin <pbrisbin@gmail.com>:
#
# * Remove all generalities, support only fetching, sorting by name,
#   and outputting the short format.
#
# * Search netrc for a machine for the given host of the email address
#   and login that matches the given email address -- use those
#   credentials.
#
# Usage:
#
# Add credentials to ~/.netrc
#
#   machine gmail.com
#     login you@gmail.com
#     password secret
#
#   # default account, override with -a
#   macdef contacts_account pbrisbin@gmail.com
#
# Add a query_command to ~/.mutt/muttrc
#
#     set query_command = "/path/to/gcontacts '%s'"
#
###
import gdata.contacts
import gdata.contacts.service
import netrc
import re
import sys

from optparse import OptionParser

P_ID = re.compile(r'^http://www.google.com/m8/feeds/contacts/.*?/base/(.*)$')
P_REL = re.compile(r'^http://schemas.google.com/g/2005#(.*)$')

class Contacts():
    def __init__(self, gd_client=None):
        self.gd_client = gd_client
        self.query = gdata.contacts.service.ContactsQuery()
        self.query.max_results = 999999
        self.feed = gd_client.GetContactsFeed(self.query.ToUri())
        self.contacts = []
        self.filtered_contacts = []

    def filter(self, keyword):
        for contact in self.contacts:
            if contact.is_match(keyword=keyword):
                self.filtered_contacts.append(contact)

    def get(self):
        for entry in self.feed.entry:
            contact = Contact(entry=entry)
            self.contacts.append(contact)

    def print_contacts(self):
        printable_item = []

        for contact in self.filtered_contacts:
            emails = contact.emails

            if not emails:
                emails = [{'address': 'n/a', 'rel':'n/a'}]
            for email_addr in emails:
                sortable_name = contact.name or contact.organization or ''
                c = {'email': email_addr['address'], 'name': sortable_name,
                        'other_info': email_addr['rel'], 'contact': contact}
                printable_item.append(c)

        cmp_fn = lambda x, y: cmp(x['name'].lower(), y['name'].lower())

        for count, printable in enumerate(sorted(printable_item, cmp=cmp_fn)):
            contact = printable['contact']

            print "{email}\t{name}\t{info}".format(
                    email=printable['email'], name=contact.fullname,
                    info=printable['other_info'])

class Contact():
    def __init__(self, entry=None):
        self.entry = entry
        self.name = self.entry.title.text or None
        self.organization = None
        if self.entry.organization and self.entry.organization.org_name:
            self.organization = self.entry.organization.org_name.text or None

        self.parse_emails()
        self.set_fullname()

    def is_match(self, keyword):
        if not keyword:
            return True

        match = False
        for email_addr in self.emails:
            if re.search(keyword, email_addr['address'], re.IGNORECASE):
                match = True
        if self.name:
            if re.search(keyword, self.name, re.IGNORECASE):
                match = True
        if self.organization:
            if re.search(keyword, self.organization, re.IGNORECASE):
                match = True
        return match

    def parse_emails(self):
        self.emails = []

        for email_addr in self.entry.email:
            rel = 'other'
            if email_addr.rel:
                match = P_REL.match(email_addr.rel)
                if match:
                    rel = match.group(1)
            self.emails.append({'address': email_addr.address, 'rel': rel})

    def set_fullname(self):
        if self.name and self.organization:
            self.fullname = "{name} ({org})".format(name=self.name,
                    org=self.organization)
        elif self.organization:
            self.fullname = "{org}".format(org=self.organization)
        elif self.name:
            self.fullname = "{name}".format(name=self.name)
        else:
            self.fullname = 'n/a'

def get_netrc():
    try:
        net_rc = netrc.netrc()
    except:
        die("Unable to process ~/.netrc")

    return net_rc

def get_email_address():
    net_rc = get_netrc()
    return net_rc.macros['contacts_account'][0].strip()

def get_password(email_address):
    try:
        email_host = email_address.split('@', 2)[1]
    except:
        die("Invalid email address.")

    net_rc = get_netrc()

    for host in net_rc.hosts.keys():
        if host == email_host:
            authenticator = net_rc.authenticators(host)

            if authenticator[0] == email_address:
                return authenticator[2]

    return None

def die(message):
    print >> sys.stderr, message
    quit(1)

if __name__ == '__main__':
    usage = "%prog [options] [keyword]"
    parser = OptionParser(usage=usage)
    parser.add_option("-a", "--account", dest="account",
        help="The gmail account email address.")

    (options, args) = parser.parse_args()

    keyword = None

    if len(args) > 0:
        keyword = args[0]

    email_addr = options.account or get_email_address()

    if not email_addr:
        die("Invalid email address. Use -a or set contacts_account in netrc")

    password = get_password(email_addr)

    if not password:
        die("Unable to determine password. Is the account present in netrc?")

    gd_client = gdata.contacts.service.ContactsService()
    gd_client.email = email_addr
    gd_client.password = password
    gd_client.source = 'dm-contacts-1'
    gd_client.ProgrammaticLogin()

    contact_set = Contacts(gd_client=gd_client)
    contact_set.get()
    contact_set.filter(keyword)
    contact_set.print_contacts()
