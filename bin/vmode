#!/usr/bin/env ruby
#
# pbrisbin 2013 - xrandr wrapper that does smart things.
#
###
class Xrandr
  def self.method_missing(*args, &block)
    @instance ||= new(`xrandr --query`)
    @instance.send(*args, &block)
  end

  attr_accessor :primary
  attr_reader :connected_displays, :disconnected_displays

  def initialize(xrandr_output)
    @primary = nil
    @connected_displays = []
    @disconnected_displays = []

    parse(xrandr_output)
  end

  def parse(xrandr_output)
    lines = xrandr_output.split("\n")

    while line = lines.shift
      next unless line =~ /^(.*) (dis)?connected /

      display = Display.new($1)
      display.read_modes(lines)

      if primary.nil?
        self.primary = display
      else
        if $2.nil?
          connected_displays << display
        else
          disconnected_displays << display
        end
      end
    end
  end
end

class Display
  attr_reader :name, :modes

  def initialize(name)
    @name = name
    @modes = []
  end

  def read_modes(lines)
    while line = lines.shift
      unless line =~ /^\s*(\d+x\d+)/
        lines.unshift(line)
        break
      end

      modes << $1
    end
  end
end

xrandr_arguments = 'xrandr'

Xrandr.disconnected_displays.map do |d|
  xrandr_arguments << " --output #{d.name} --off"
end

if connected = Xrandr.connected_displays.first
  xrandr_arguments << " --output #{connected.name} --off"
  xrandr_arguments << " --output #{connected.name} --mode #{connected.modes.first}"
  xrandr_arguments << " --right-of #{Xrandr.primary.name}"
end

system(xrandr_arguments)
system('feh --bg-max ~/.background.png')
system('pkill notify-osd')
